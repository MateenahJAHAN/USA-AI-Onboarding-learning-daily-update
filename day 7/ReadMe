Day 7 Learning: API Test Automation Exploration
Overview
Today I focused on exploring API test automation fundamentals and initial implementation:

Working with FreeCodeCamp API testing materials
Learning about request/response handling
Experimenting with Twilio API
Setting up automation scripts

API Test Automation Practice
I began exploring API test automation based on FreeCodeCamp materials:

Created a workspace named "FreeCodeCamp - API Test Automation"
Learned how to extract data from responses, particularly focusing on order_ID
Practiced writing pre-request and post-request scripts
Used console.log for debugging API responses

Key Concepts Learned

Status code validation and handling
Product information extraction
Client-side interaction patterns
Order creation and response processing
Creating forks of existing collections

Twilio API Exploration
Started exploring the Twilio API:

Followed the first video tutorial
Implemented examples in Postman
Created a collection for Twilio-specific requests
Code Implementation

Example of a basic pre-request script for authentication:
// Pre-request Script for Authentication
pm.environment.set("timestamp", Date.now());
const signature = CryptoJS.HmacSHA256(
    pm.environment.get("apiKey") + 
    pm.environment.get("timestamp"), 
    pm.environment.get("secretKey")
).toString();
pm.environment.set("signature", signature);

Example of a post-request test script:

// Post-request Test Script
pm.test("Status code is 200", function() {
    pm.response.to.have.status(200);
});

pm.test("Response contains order_ID", function() {
    const responseData = pm.response.json();
    pm.expect(responseData).to.have.property('order_ID');
    
    // Store order_ID for future requests
    if (responseData.order_ID) {
        pm.environment.set("orderId", responseData.order_ID);
        console.log("Saved order_ID: " + responseData.order_ID);
    }
});


Basic Python Requests Example

import requests
import json

# Basic API request demonstration
response = requests.get('https://jsonplaceholder.typicode.com/todos/1')
data = response.json()

# Print the response
print(f"Status Code: {response.status_code}")
print(f"Task: {data['title']}")
print(f"Completed: {data['completed']}")

# Post example
new_task = {
    "userId": 1,
    "title": "Learn API Testing",
    "completed": False
}

post_response = requests.post(
    'https://jsonplaceholder.typicode.com/todos',
    json=new_task
)

print(f"Post Status: {post_response.status_code}")
print(f"New Task ID: {post_response.json()['id']}")

Challenges & Solutions
Challenge 1: Authentication Issues
Initial attempts at authentication were unsuccessful due to improper header formatting.
Solution:
// Corrected Authentication Header Setup
pm.request.headers.add({
    key: 'Authorization',
    value: 'Bearer ' + pm.environment.get("authToken")
});

Challenge 2: Response Handling
Had difficulty extracting nested data from complex JSON responses.
Solution:
javascript// Improved Response Parsing
const jsonData = pm.response.json();
// Access nested properties safely using optional chaining
const orderDetails = jsonData.data?.orders?.[0];
if (orderDetails) {
    pm.environment.set("lastOrderId", orderDetails.id);
}
